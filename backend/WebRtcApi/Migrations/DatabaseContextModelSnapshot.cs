// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebRtcApi.Data;

#nullable disable

namespace WebRtcApi.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WebRtcApi.Models.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("feedback_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("FeedbackText")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("feedback_text");

                    b.Property<int?>("MentorId")
                        .HasColumnType("int")
                        .HasColumnName("mentor_id");

                    b.Property<int?>("SubmissionId")
                        .HasColumnType("int")
                        .HasColumnName("submission_id");

                    b.HasKey("FeedbackId")
                        .HasName("PK__Feedback__7A6B2B8C1CBA65EC");

                    b.HasIndex("MentorId");

                    b.HasIndex("SubmissionId");

                    b.ToTable("Feedback", (string)null);
                });

            modelBuilder.Entity("WebRtcApi.Models.FeedbackReply", b =>
                {
                    b.Property<int>("ReplyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("reply_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReplyId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("FeedbackId")
                        .HasColumnType("int")
                        .HasColumnName("feedback_id");

                    b.Property<string>("ReplyText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("reply_text");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("ReplyId")
                        .HasName("PK__Feedback__EE4056981FA1A631");

                    b.HasIndex("FeedbackId");

                    b.HasIndex("UserId");

                    b.ToTable("FeedbackReplies");
                });

            modelBuilder.Entity("WebRtcApi.Models.ListeningExam", b =>
                {
                    b.Property<int>("ListeningExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("listening_exam_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ListeningExamId"));

                    b.Property<string>("AnswerFill")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("answer_fill");

                    b.Property<string>("AudioUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("audio_url");

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("correct_answer");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("ExamSetId")
                        .HasColumnType("int")
                        .HasColumnName("exam_set_id");

                    b.Property<string>("OptionA")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("option_a");

                    b.Property<string>("OptionB")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("option_b");

                    b.Property<string>("OptionC")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("option_c");

                    b.Property<string>("OptionD")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("option_d");

                    b.Property<string>("QuestionText")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("question_text");

                    b.HasKey("ListeningExamId")
                        .HasName("PK__Listenin__8BD405AC8C1D506F");

                    b.HasIndex("ExamSetId");

                    b.ToTable("ListeningExams");
                });

            modelBuilder.Entity("WebRtcApi.Models.ListeningExamSet", b =>
                {
                    b.Property<int>("ExamSetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("exam_set_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExamSetId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ExamSetCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("exam_set_code");

                    b.Property<string>("ExamSetTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("exam_set_title");

                    b.Property<int>("TotalQuestions")
                        .HasColumnType("int")
                        .HasColumnName("total_questions");

                    b.HasKey("ExamSetId")
                        .HasName("PK__Listenin__A17B929E0671B6BC");

                    b.ToTable("ListeningExamSets");
                });

            modelBuilder.Entity("WebRtcApi.Models.MentorPackage", b =>
                {
                    b.Property<int>("PackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("package_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PackageId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<int>("DurationMonths")
                        .HasColumnType("int")
                        .HasColumnName("duration_months");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("price");

                    b.HasKey("PackageId")
                        .HasName("PK__MentorPa__63846AE826817531");

                    b.HasIndex("CreatedBy");

                    b.ToTable("MentorPackages");
                });

            modelBuilder.Entity("WebRtcApi.Models.Rating", b =>
                {
                    b.Property<int>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("rating_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RatingId"));

                    b.Property<string>("Comment")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("comment");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("MentorId")
                        .HasColumnType("int")
                        .HasColumnName("mentor_id");

                    b.Property<int?>("Score")
                        .HasColumnType("int")
                        .HasColumnName("score");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("student_id");

                    b.HasKey("RatingId")
                        .HasName("PK__Ratings__D35B278BA9325B36");

                    b.HasIndex("MentorId");

                    b.HasIndex("StudentId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("WebRtcApi.Models.ReadingExam", b =>
                {
                    b.Property<int>("ReadingExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("reading_exam_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReadingExamId"));

                    b.Property<string>("AnswerFill")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("answer_fill");

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("correct_answer");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("ExamSetId")
                        .HasColumnType("int")
                        .HasColumnName("exam_set_id");

                    b.Property<string>("OptionA")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("option_a");

                    b.Property<string>("OptionB")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("option_b");

                    b.Property<string>("OptionC")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("option_c");

                    b.Property<string>("OptionD")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("option_d");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("question_text");

                    b.HasKey("ReadingExamId")
                        .HasName("PK__ReadingE__42DF75E4BB21C89B");

                    b.HasIndex("ExamSetId");

                    b.ToTable("ReadingExams");
                });

            modelBuilder.Entity("WebRtcApi.Models.ReadingExamSet", b =>
                {
                    b.Property<int>("ExamSetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("exam_set_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExamSetId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ExamSetCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("exam_set_code");

                    b.Property<string>("ExamSetTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("exam_set_title");

                    b.Property<int>("TotalQuestions")
                        .HasColumnType("int")
                        .HasColumnName("total_questions");

                    b.HasKey("ExamSetId")
                        .HasName("PK__ReadingE__A17B929E4482E5F5");

                    b.ToTable("ReadingExamSets");
                });

            modelBuilder.Entity("WebRtcApi.Models.SpeakingExam", b =>
                {
                    b.Property<int>("SpeakingExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("speaking_exam_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpeakingExamId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("ExamSetId")
                        .HasColumnType("int")
                        .HasColumnName("exam_set_id");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("question_text");

                    b.HasKey("SpeakingExamId")
                        .HasName("PK__Speaking__748363AD3304BFEF");

                    b.HasIndex("ExamSetId");

                    b.ToTable("SpeakingExams");
                });

            modelBuilder.Entity("WebRtcApi.Models.SpeakingExamSet", b =>
                {
                    b.Property<int>("ExamSetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("exam_set_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExamSetId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ExamSetCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("exam_set_code");

                    b.Property<string>("ExamSetTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("exam_set_title");

                    b.Property<int>("TotalQuestions")
                        .HasColumnType("int")
                        .HasColumnName("total_questions");

                    b.HasKey("ExamSetId")
                        .HasName("PK__Speaking__A17B929E81B9EAEC");

                    b.ToTable("SpeakingExamSets");
                });

            modelBuilder.Entity("WebRtcApi.Models.Submission", b =>
                {
                    b.Property<int>("SubmissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("submission_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubmissionId"));

                    b.Property<decimal?>("AiScore")
                        .HasColumnType("decimal(4, 2)")
                        .HasColumnName("ai_score");

                    b.Property<string>("AnswerAudioUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("answer_audio_url");

                    b.Property<string>("AnswerChoice")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("answer_choice");

                    b.Property<string>("AnswerFill")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("answer_fill");

                    b.Property<string>("AnswerText")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("answer_text");

                    b.Property<int?>("ListeningExamSetId")
                        .HasColumnType("int")
                        .HasColumnName("listening_exam_set_id");

                    b.Property<decimal?>("MentorScore")
                        .HasColumnType("decimal(4, 2)")
                        .HasColumnName("mentor_score");

                    b.Property<int?>("ReadingExamSetId")
                        .HasColumnType("int")
                        .HasColumnName("reading_exam_set_id");

                    b.Property<int?>("SpeakingExamSetId")
                        .HasColumnType("int")
                        .HasColumnName("speaking_exam_set_id");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Pending")
                        .HasColumnName("status");

                    b.Property<DateTime?>("SubmittedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("submitted_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int?>("WritingExamSetId")
                        .HasColumnType("int")
                        .HasColumnName("writing_exam_set_id");

                    b.HasKey("SubmissionId")
                        .HasName("PK__Submissi__9B535595A47119B8");

                    b.HasIndex("ListeningExamSetId");

                    b.HasIndex("ReadingExamSetId");

                    b.HasIndex("SpeakingExamSetId");

                    b.HasIndex("UserId");

                    b.HasIndex("WritingExamSetId");

                    b.ToTable("Submissions");
                });

            modelBuilder.Entity("WebRtcApi.Models.Tip", b =>
                {
                    b.Property<int>("TipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("tip_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TipId"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("MentorId")
                        .HasColumnType("int")
                        .HasColumnName("mentor_id");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("title");

                    b.HasKey("TipId")
                        .HasName("PK__Tips__377877B260C35396");

                    b.HasIndex("MentorId");

                    b.ToTable("Tips");
                });

            modelBuilder.Entity("WebRtcApi.Models.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("transaction_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("PackageId")
                        .HasColumnType("int")
                        .HasColumnName("package_id");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Success")
                        .HasColumnName("status");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("TransactionId")
                        .HasName("PK__Transact__85C600AF9F6E8EE6");

                    b.HasIndex("PackageId");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("WebRtcApi.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<bool?>("Approved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("approved");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("Experience")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("experience");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("full_name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password_hash");

                    b.Property<string>("PortraitUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("portrait_url");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("role");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Active")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("UserId")
                        .HasName("PK__Users__B9BE370FEC5421A2");

                    b.HasIndex(new[] { "Email" }, "UQ__Users__AB6E6164878D058A")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WebRtcApi.Models.WritingExam", b =>
                {
                    b.Property<int>("WritingExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("writing_exam_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WritingExamId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("ExamSetId")
                        .HasColumnType("int")
                        .HasColumnName("exam_set_id");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("question_text");

                    b.HasKey("WritingExamId")
                        .HasName("PK__WritingE__AD39DDEE5F9515DB");

                    b.HasIndex("ExamSetId");

                    b.ToTable("WritingExams");
                });

            modelBuilder.Entity("WebRtcApi.Models.WritingExamSet", b =>
                {
                    b.Property<int>("ExamSetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("exam_set_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExamSetId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ExamSetCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("exam_set_code");

                    b.Property<string>("ExamSetTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("exam_set_title");

                    b.Property<int>("TotalQuestions")
                        .HasColumnType("int")
                        .HasColumnName("total_questions");

                    b.HasKey("ExamSetId")
                        .HasName("PK__WritingE__A17B929E054A746A");

                    b.ToTable("WritingExamSets");
                });

            modelBuilder.Entity("WebRtcApi.Models.Feedback", b =>
                {
                    b.HasOne("WebRtcApi.Models.User", "Mentor")
                        .WithMany("Feedbacks")
                        .HasForeignKey("MentorId")
                        .HasConstraintName("FK__Feedback__mentor__628FA481");

                    b.HasOne("WebRtcApi.Models.Submission", "Submission")
                        .WithMany("Feedbacks")
                        .HasForeignKey("SubmissionId")
                        .HasConstraintName("FK__Feedback__submis__619B8048");

                    b.Navigation("Mentor");

                    b.Navigation("Submission");
                });

            modelBuilder.Entity("WebRtcApi.Models.FeedbackReply", b =>
                {
                    b.HasOne("WebRtcApi.Models.Feedback", "Feedback")
                        .WithMany("FeedbackReplies")
                        .HasForeignKey("FeedbackId")
                        .HasConstraintName("FK__FeedbackR__feedb__66603565");

                    b.HasOne("WebRtcApi.Models.User", "User")
                        .WithMany("FeedbackReplies")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__FeedbackR__user___6754599E");

                    b.Navigation("Feedback");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebRtcApi.Models.ListeningExam", b =>
                {
                    b.HasOne("WebRtcApi.Models.ListeningExamSet", "ExamSet")
                        .WithMany("ListeningExams")
                        .HasForeignKey("ExamSetId")
                        .HasConstraintName("FK__Listening__exam___4D94879B");

                    b.Navigation("ExamSet");
                });

            modelBuilder.Entity("WebRtcApi.Models.MentorPackage", b =>
                {
                    b.HasOne("WebRtcApi.Models.User", "CreatedByNavigation")
                        .WithMany("MentorPackages")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK__MentorPac__creat__6B24EA82");

                    b.Navigation("CreatedByNavigation");
                });

            modelBuilder.Entity("WebRtcApi.Models.Rating", b =>
                {
                    b.HasOne("WebRtcApi.Models.User", "Mentor")
                        .WithMany("RatingMentors")
                        .HasForeignKey("MentorId")
                        .HasConstraintName("FK__Ratings__mentor___797309D9");

                    b.HasOne("WebRtcApi.Models.User", "Student")
                        .WithMany("RatingStudents")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK__Ratings__student__787EE5A0");

                    b.Navigation("Mentor");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("WebRtcApi.Models.ReadingExam", b =>
                {
                    b.HasOne("WebRtcApi.Models.ReadingExamSet", "ExamSet")
                        .WithMany("ReadingExams")
                        .HasForeignKey("ExamSetId")
                        .HasConstraintName("FK__ReadingEx__exam___49C3F6B7");

                    b.Navigation("ExamSet");
                });

            modelBuilder.Entity("WebRtcApi.Models.SpeakingExam", b =>
                {
                    b.HasOne("WebRtcApi.Models.SpeakingExamSet", "ExamSet")
                        .WithMany("SpeakingExams")
                        .HasForeignKey("ExamSetId")
                        .HasConstraintName("FK__SpeakingE__exam___5535A963");

                    b.Navigation("ExamSet");
                });

            modelBuilder.Entity("WebRtcApi.Models.Submission", b =>
                {
                    b.HasOne("WebRtcApi.Models.ListeningExamSet", "ListeningExamSet")
                        .WithMany("Submissions")
                        .HasForeignKey("ListeningExamSetId")
                        .HasConstraintName("FK__Submissio__liste__5AEE82B9");

                    b.HasOne("WebRtcApi.Models.ReadingExamSet", "ReadingExamSet")
                        .WithMany("Submissions")
                        .HasForeignKey("ReadingExamSetId")
                        .HasConstraintName("FK__Submissio__readi__59FA5E80");

                    b.HasOne("WebRtcApi.Models.SpeakingExamSet", "SpeakingExamSet")
                        .WithMany("Submissions")
                        .HasForeignKey("SpeakingExamSetId")
                        .HasConstraintName("FK__Submissio__speak__5CD6CB2B");

                    b.HasOne("WebRtcApi.Models.User", "User")
                        .WithMany("Submissions")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Submissio__user___59063A47");

                    b.HasOne("WebRtcApi.Models.WritingExamSet", "WritingExamSet")
                        .WithMany("Submissions")
                        .HasForeignKey("WritingExamSetId")
                        .HasConstraintName("FK__Submissio__writi__5BE2A6F2");

                    b.Navigation("ListeningExamSet");

                    b.Navigation("ReadingExamSet");

                    b.Navigation("SpeakingExamSet");

                    b.Navigation("User");

                    b.Navigation("WritingExamSet");
                });

            modelBuilder.Entity("WebRtcApi.Models.Tip", b =>
                {
                    b.HasOne("WebRtcApi.Models.User", "Mentor")
                        .WithMany("Tips")
                        .HasForeignKey("MentorId")
                        .HasConstraintName("FK__Tips__mentor_id__74AE54BC");

                    b.Navigation("Mentor");
                });

            modelBuilder.Entity("WebRtcApi.Models.Transaction", b =>
                {
                    b.HasOne("WebRtcApi.Models.MentorPackage", "Package")
                        .WithMany("Transactions")
                        .HasForeignKey("PackageId")
                        .HasConstraintName("FK__Transacti__packa__6FE99F9F");

                    b.HasOne("WebRtcApi.Models.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Transacti__user___6EF57B66");

                    b.Navigation("Package");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebRtcApi.Models.WritingExam", b =>
                {
                    b.HasOne("WebRtcApi.Models.WritingExamSet", "ExamSet")
                        .WithMany("WritingExams")
                        .HasForeignKey("ExamSetId")
                        .HasConstraintName("FK__WritingEx__exam___5165187F");

                    b.Navigation("ExamSet");
                });

            modelBuilder.Entity("WebRtcApi.Models.Feedback", b =>
                {
                    b.Navigation("FeedbackReplies");
                });

            modelBuilder.Entity("WebRtcApi.Models.ListeningExamSet", b =>
                {
                    b.Navigation("ListeningExams");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("WebRtcApi.Models.MentorPackage", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("WebRtcApi.Models.ReadingExamSet", b =>
                {
                    b.Navigation("ReadingExams");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("WebRtcApi.Models.SpeakingExamSet", b =>
                {
                    b.Navigation("SpeakingExams");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("WebRtcApi.Models.Submission", b =>
                {
                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("WebRtcApi.Models.User", b =>
                {
                    b.Navigation("FeedbackReplies");

                    b.Navigation("Feedbacks");

                    b.Navigation("MentorPackages");

                    b.Navigation("RatingMentors");

                    b.Navigation("RatingStudents");

                    b.Navigation("Submissions");

                    b.Navigation("Tips");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("WebRtcApi.Models.WritingExamSet", b =>
                {
                    b.Navigation("Submissions");

                    b.Navigation("WritingExams");
                });
#pragma warning restore 612, 618
        }
    }
}
